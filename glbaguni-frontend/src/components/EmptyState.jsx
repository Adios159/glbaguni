import React, { useState, useEffect } from 'react';
import { Link } from 'react-router-dom';

const EmptyState = ({ type, customConfig = null, onRetry = null }) => {
    const [isVisible, setIsVisible] = useState(false);
    const [isRetrying, setIsRetrying] = useState(false);

    useEffect(() => {
        setIsVisible(true);
    }, []);

    const emptyStates = {
        history: {
            icon: 'üìö',
            title: 'ÏïÑÏßÅ ÏöîÏïΩ Í∏∞Î°ùÏù¥ ÏóÜÏñ¥Ïöî',
            description: 'Ï≤´ Î≤àÏß∏ ÏöîÏïΩÏùÑ ÏãúÏûëÌï¥Î≥¥ÏÑ∏Ïöî! RSS ÌîºÎìúÎÇò Í∏∞ÏÇ¨ URLÏùÑ ÏûÖÎ†•ÌïòÎ©¥ AIÍ∞Ä Í∞ÑÍ≤∞ÌïòÍ≤å ÏöîÏïΩÌï¥ÎìúÎ¶ΩÎãàÎã§.',
            action: 'ÏöîÏïΩ ÏãúÏûëÌïòÍ∏∞',
            actionPath: '/summarize',
            actionIcon: '‚ú®',
            helpText: 'RSS URLÏù¥ÎÇò Í∏∞ÏÇ¨ URLÏùÑ ÏûÖÎ†•ÌïòÎ©¥ Î™á Ï¥à ÎßåÏóê ÏöîÏïΩÏùÑ Î∞õÏùÑ Ïàò ÏûàÏñ¥Ïöî.',
            secondaryActions: [
                { label: 'ÏÉòÌîå RSS Î≥¥Í∏∞', path: '/sources' },
                { label: 'ÏÇ¨Ïö©Î≤ï ÏïåÏïÑÎ≥¥Í∏∞', path: '/' }
            ]
        },
        recommendations: {
            icon: 'üéØ',
            title: 'Ï∂îÏ≤ú Îâ¥Ïä§Í∞Ä Ï§ÄÎπÑ Ï§ëÏù¥ÏóêÏöî',
            description: 'Îçî ÎßéÏùÄ ÏöîÏïΩÏùÑ ÌïòÎ©¥ ÎßûÏ∂§Ìòï Ï∂îÏ≤úÏùÑ Î∞õÏùÑ Ïàò ÏûàÏñ¥Ïöî. Í¥ÄÏã¨ÏÇ¨Î•º ÌååÏïÖÌï¥ÏÑú Îçî ÎÇòÏùÄ Îâ¥Ïä§Î•º Ï∂îÏ≤úÌï¥ÎìúÎ¶¥Í≤åÏöî.',
            action: 'Îâ¥Ïä§ ÏöîÏïΩÌïòÍ∏∞',
            actionPath: '/summarize',
            actionIcon: 'üîç',
            helpText: '3-5Í∞úÏùò Í∏∞ÏÇ¨Î•º ÏöîÏïΩÌïòÎ©¥ Í∞úÏù∏ÌôîÎêú Ï∂îÏ≤úÏùÑ ÏãúÏûëÌï¥ÎìúÎ†§Ïöî.',
            secondaryActions: [
                { label: 'Ïù∏Í∏∞ Îâ¥Ïä§ ÏÜåÏä§', path: '/sources' }
            ]
        },
        sources: {
            icon: 'üì∞',
            title: 'Ï¶êÍ≤®Ï∞æÎäî Îâ¥Ïä§ ÏÜåÏä§Í∞Ä ÏóÜÏñ¥Ïöî',
            description: 'ÏûêÏ£º Ïù¥Ïö©ÌïòÎäî RSS ÌîºÎìúÎÇò Îâ¥Ïä§ ÏÇ¨Ïù¥Ìä∏Î•º Ï¶êÍ≤®Ï∞æÍ∏∞Ïóê Ï∂îÍ∞ÄÌï¥Î≥¥ÏÑ∏Ïöî.',
            action: 'ÏÜåÏä§ Ï∂îÍ∞ÄÌïòÍ∏∞',
            actionPath: '/sources',
            actionIcon: '‚ûï',
            helpText: 'Ïã†Î¢∞Ìï† Ïàò ÏûàÎäî Îâ¥Ïä§ ÏÜåÏä§Î•º ÎØ∏Î¶¨ Îì±Î°ùÌïòÎ©¥ Îπ†Î•¥Í≤å ÏöîÏïΩÌï† Ïàò ÏûàÏñ¥Ïöî.',
            secondaryActions: [
                { label: 'Ï∂îÏ≤ú RSS ÌîºÎìú', path: '/sources' }
            ]
        },
        search: {
            icon: 'üîé',
            title: 'Í≤ÄÏÉâ Í≤∞Í≥ºÍ∞Ä ÏóÜÏñ¥Ïöî',
            description: 'Îã§Î•∏ Í≤ÄÏÉâÏñ¥Î°ú ÏãúÎèÑÌï¥Î≥¥ÏãúÍ±∞ÎÇò Îçî ÏùºÎ∞òÏ†ÅÏù∏ ÌÇ§ÏõåÎìúÎ•º ÏÇ¨Ïö©Ìï¥Î≥¥ÏÑ∏Ïöî.',
            action: 'ÏÉàÎ°ú Í≤ÄÏÉâÌïòÍ∏∞',
            actionPath: '/summarize',
            actionIcon: 'üîÑ',
            helpText: 'ÌÇ§ÏõåÎìúÎ•º Î∞îÍæ∏Í±∞ÎÇò RSS URLÏùÑ ÏßÅÏ†ë ÏûÖÎ†•Ìï¥Î≥¥ÏÑ∏Ïöî.',
            secondaryActions: [
                { label: 'Ïù∏Í∏∞ Í≤ÄÏÉâÏñ¥', path: '/recommendations' }
            ]
        },
        error: {
            icon: 'üòµ',
            title: 'Î¨∏Ï†úÍ∞Ä Î∞úÏÉùÌñàÏñ¥Ïöî',
            description: 'ÏùºÏãúÏ†ÅÏù∏ Ïò§Î•òÏùº Ïàò ÏûàÏäµÎãàÎã§. Ïû†Ïãú ÌõÑ Îã§Ïãú ÏãúÎèÑÌï¥Ï£ºÏÑ∏Ïöî.',
            action: 'Îã§Ïãú ÏãúÎèÑ',
            actionPath: null,
            actionIcon: 'üîÑ',
            helpText: 'Í≥ÑÏÜç Î¨∏Ï†úÍ∞Ä Î∞úÏÉùÌïòÎ©¥ Îã§Î•∏ URLÏùÑ ÏãúÎèÑÌïòÍ±∞ÎÇò Í≥†Í∞ùÏÑºÌÑ∞Ïóê Î¨∏ÏùòÌï¥Ï£ºÏÑ∏Ïöî.',
            secondaryActions: [
                { label: 'Î¨∏ÏùòÌïòÍ∏∞', path: '/contact' },
                { label: 'ÏÑúÎπÑÏä§ ÏÉÅÌÉú', path: '/' }
            ]
        },
        loading: {
            icon: '‚è≥',
            title: 'Îç∞Ïù¥ÌÑ∞Î•º Î∂àÎü¨Ïò§Îäî Ï§ë...',
            description: 'Ïû†ÏãúÎßå Í∏∞Îã§Î†§Ï£ºÏÑ∏Ïöî.',
            action: null,
            actionPath: null,
            actionIcon: null
        },
        network: {
            icon: 'üì°',
            title: 'Ïù∏ÌÑ∞ÎÑ∑ Ïó∞Í≤∞ÏùÑ ÌôïÏù∏Ìï¥Ï£ºÏÑ∏Ïöî',
            description: 'ÎÑ§Ìä∏ÏõåÌÅ¨ Ïó∞Í≤∞Ïóê Î¨∏Ï†úÍ∞Ä ÏûàÎäî Í≤É Í∞ôÏäµÎãàÎã§. Ïó∞Í≤∞ ÏÉÅÌÉúÎ•º ÌôïÏù∏ÌïòÍ≥† Îã§Ïãú ÏãúÎèÑÌï¥Ï£ºÏÑ∏Ïöî.',
            action: 'Îã§Ïãú ÏãúÎèÑ',
            actionPath: null,
            actionIcon: 'üîÑ',
            helpText: 'WiFiÎÇò Î™®Î∞îÏùº Îç∞Ïù¥ÌÑ∞ Ïó∞Í≤∞ÏùÑ ÌôïÏù∏Ìï¥Î≥¥ÏÑ∏Ïöî.',
            secondaryActions: [
                { label: 'Ï∫êÏãúÎêú Îç∞Ïù¥ÌÑ∞ Î≥¥Í∏∞', path: '/history' }
            ]
        }
    };

    const config = customConfig || emptyStates[type] || emptyStates.error;

    const handleAction = async () => {
        if (config.actionPath) {
            // React Router ÎßÅÌÅ¨Î°ú Ï≤òÎ¶¨Îê®
        } else if (onRetry) {
            setIsRetrying(true);
            try {
                await onRetry();
            } catch (error) {
                console.error('Retry failed:', error);
            } finally {
                setIsRetrying(false);
            }
        } else {
            window.location.reload();
        }
    };

    return (
        <div className={`flex flex-col items-center justify-center py-12 sm:py-16 px-4 text-center transition-all duration-700 transform ${isVisible ? 'opacity-100 translate-y-0' : 'opacity-0 translate-y-8'
            }`}>
            {/* Ïï†ÎãàÎ©îÏù¥ÏÖò ÏïÑÏù¥ÏΩò */}
            <div className="relative mb-6 sm:mb-8">
                <div className="w-20 h-20 sm:w-24 sm:h-24 bg-gradient-to-br from-gray-100 to-gray-200 dark:from-gray-800 dark:to-gray-700 rounded-full flex items-center justify-center shadow-lg animate-pulse">
                    <span className="text-3xl sm:text-4xl animate-bounce">{config.icon}</span>
                </div>

                {/* Ïû•ÏãùÏö© ÏõêÌòï */}
                <div className="absolute -inset-2 bg-gradient-to-br from-blue-500/20 to-purple-500/20 rounded-full animate-pulse" />
            </div>

            {/* Ï†úÎ™© */}
            <h3 className="text-lg sm:text-xl font-semibold text-gray-900 dark:text-white mb-2 sm:mb-3 px-2">
                {config.title}
            </h3>

            {/* ÏÑ§Î™Ö */}
            <p className="text-sm sm:text-base text-gray-600 dark:text-gray-400 mb-6 sm:mb-8 max-w-md leading-relaxed px-2">
                {config.description}
            </p>

            {/* Ïï°ÏÖò Î≤ÑÌäº */}
            {config.action && (
                <div className="space-y-4 w-full max-w-sm">
                    {config.actionPath ? (
                        <Link
                            to={config.actionPath}
                            className="w-full sm:w-auto inline-flex items-center justify-center px-6 py-3 bg-gradient-to-r from-blue-600 to-blue-700 hover:from-blue-700 hover:to-blue-800 text-white font-medium rounded-lg transition-all duration-200 shadow-lg hover:shadow-xl transform hover:scale-105 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2"
                        >
                            {config.actionIcon && (
                                <span className="mr-2 text-lg">{config.actionIcon}</span>
                            )}
                            {config.action}
                        </Link>
                    ) : (
                        <button
                            onClick={handleAction}
                            disabled={isRetrying}
                            className="w-full sm:w-auto inline-flex items-center justify-center px-6 py-3 bg-gradient-to-r from-blue-600 to-blue-700 hover:from-blue-700 hover:to-blue-800 disabled:from-gray-400 disabled:to-gray-500 text-white font-medium rounded-lg transition-all duration-200 shadow-lg hover:shadow-xl transform hover:scale-105 disabled:transform-none disabled:hover:scale-100 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2"
                        >
                            {isRetrying ? (
                                <>
                                    <svg className="animate-spin -ml-1 mr-3 h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                                        <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                                        <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                                    </svg>
                                    Ï≤òÎ¶¨ Ï§ë...
                                </>
                            ) : (
                                <>
                                    {config.actionIcon && (
                                        <span className="mr-2 text-lg">{config.actionIcon}</span>
                                    )}
                                    {config.action}
                                </>
                            )}
                        </button>
                    )}

                    {/* Î≥¥Ï°∞ Ïï°ÏÖòÎì§ */}
                    {config.secondaryActions && (
                        <div className="flex flex-col sm:flex-row flex-wrap justify-center gap-2 sm:gap-3 mt-4">
                            {config.secondaryActions.map((action, index) => (
                                <Link
                                    key={index}
                                    to={action.path}
                                    className="text-sm text-blue-600 hover:text-blue-800 dark:text-blue-400 dark:hover:text-blue-300 font-medium transition-colors duration-200 hover:underline px-2 py-1"
                                >
                                    {action.label}
                                </Link>
                            ))}
                        </div>
                    )}
                </div>
            )}

            {/* ÎèÑÏõÄÎßê ÏÑπÏÖò */}
            {config.helpText && (
                <div className="mt-6 sm:mt-8 p-4 bg-gradient-to-r from-gray-50 to-blue-50 dark:from-gray-800 dark:to-blue-900/20 rounded-lg max-w-md w-full mx-2">
                    <h4 className="text-sm font-semibold text-gray-900 dark:text-white mb-2 flex items-center justify-center">
                        <span className="mr-2">üí°</span>
                        ÎèÑÏõÄÎßê
                    </h4>
                    <p className="text-xs sm:text-sm text-gray-600 dark:text-gray-400 leading-relaxed">
                        {config.helpText}
                    </p>
                </div>
            )}

            {/* Î™®Î∞îÏùº Ï†ÑÏö© Îπ†Î•∏ Ïï°ÏÖò */}
            {type === 'history' && (
                <div className="mt-6 sm:hidden w-full max-w-sm space-y-2">
                    <Link
                        to="/sources"
                        className="w-full flex items-center justify-center px-4 py-2 bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-700 rounded-lg text-sm font-medium text-gray-700 dark:text-gray-300 hover:bg-gray-50 dark:hover:bg-gray-700 transition-colors"
                    >
                        <span className="mr-2">üì∞</span>
                        Ïù∏Í∏∞ Îâ¥Ïä§ ÏÜåÏä§ Î≥¥Í∏∞
                    </Link>
                    <Link
                        to="/recommendations"
                        className="w-full flex items-center justify-center px-4 py-2 bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-700 rounded-lg text-sm font-medium text-gray-700 dark:text-gray-300 hover:bg-gray-50 dark:hover:bg-gray-700 transition-colors"
                    >
                        <span className="mr-2">üî•</span>
                        Ï∂îÏ≤ú Î∞õÍ∏∞
                    </Link>
                </div>
            )}
        </div>
    );
};

export default EmptyState; 